// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: apiary/v1/service.proto

package apiaryv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ApiaryService_GetEntries_FullMethodName    = "/apiary.v1.ApiaryService/GetEntries"
	ApiaryService_SetEntries_FullMethodName    = "/apiary.v1.ApiaryService/SetEntries"
	ApiaryService_DeleteEntries_FullMethodName = "/apiary.v1.ApiaryService/DeleteEntries"
	ApiaryService_ClearEntries_FullMethodName  = "/apiary.v1.ApiaryService/ClearEntries"
)

// ApiaryServiceClient is the client API for ApiaryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ApiaryServiceClient interface {
	GetEntries(ctx context.Context, in *GetEntriesRequest, opts ...grpc.CallOption) (*GetEntriesResponse, error)
	SetEntries(ctx context.Context, in *SetEntriesRequest, opts ...grpc.CallOption) (*SetEntriesResponse, error)
	DeleteEntries(ctx context.Context, in *DeleteEntriesRequest, opts ...grpc.CallOption) (*DeleteEntriesResponse, error)
	ClearEntries(ctx context.Context, in *ClearEntriesRequest, opts ...grpc.CallOption) (*ClearEntriesResponse, error)
}

type apiaryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewApiaryServiceClient(cc grpc.ClientConnInterface) ApiaryServiceClient {
	return &apiaryServiceClient{cc}
}

func (c *apiaryServiceClient) GetEntries(ctx context.Context, in *GetEntriesRequest, opts ...grpc.CallOption) (*GetEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEntriesResponse)
	err := c.cc.Invoke(ctx, ApiaryService_GetEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiaryServiceClient) SetEntries(ctx context.Context, in *SetEntriesRequest, opts ...grpc.CallOption) (*SetEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SetEntriesResponse)
	err := c.cc.Invoke(ctx, ApiaryService_SetEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiaryServiceClient) DeleteEntries(ctx context.Context, in *DeleteEntriesRequest, opts ...grpc.CallOption) (*DeleteEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteEntriesResponse)
	err := c.cc.Invoke(ctx, ApiaryService_DeleteEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiaryServiceClient) ClearEntries(ctx context.Context, in *ClearEntriesRequest, opts ...grpc.CallOption) (*ClearEntriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ClearEntriesResponse)
	err := c.cc.Invoke(ctx, ApiaryService_ClearEntries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiaryServiceServer is the server API for ApiaryService service.
// All implementations must embed UnimplementedApiaryServiceServer
// for forward compatibility
type ApiaryServiceServer interface {
	GetEntries(context.Context, *GetEntriesRequest) (*GetEntriesResponse, error)
	SetEntries(context.Context, *SetEntriesRequest) (*SetEntriesResponse, error)
	DeleteEntries(context.Context, *DeleteEntriesRequest) (*DeleteEntriesResponse, error)
	ClearEntries(context.Context, *ClearEntriesRequest) (*ClearEntriesResponse, error)
	mustEmbedUnimplementedApiaryServiceServer()
}

// UnimplementedApiaryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedApiaryServiceServer struct {
}

func (UnimplementedApiaryServiceServer) GetEntries(context.Context, *GetEntriesRequest) (*GetEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntries not implemented")
}
func (UnimplementedApiaryServiceServer) SetEntries(context.Context, *SetEntriesRequest) (*SetEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEntries not implemented")
}
func (UnimplementedApiaryServiceServer) DeleteEntries(context.Context, *DeleteEntriesRequest) (*DeleteEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntries not implemented")
}
func (UnimplementedApiaryServiceServer) ClearEntries(context.Context, *ClearEntriesRequest) (*ClearEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClearEntries not implemented")
}
func (UnimplementedApiaryServiceServer) mustEmbedUnimplementedApiaryServiceServer() {}

// UnsafeApiaryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiaryServiceServer will
// result in compilation errors.
type UnsafeApiaryServiceServer interface {
	mustEmbedUnimplementedApiaryServiceServer()
}

func RegisterApiaryServiceServer(s grpc.ServiceRegistrar, srv ApiaryServiceServer) {
	s.RegisterService(&ApiaryService_ServiceDesc, srv)
}

func _ApiaryService_GetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiaryServiceServer).GetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiaryService_GetEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiaryServiceServer).GetEntries(ctx, req.(*GetEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiaryService_SetEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiaryServiceServer).SetEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiaryService_SetEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiaryServiceServer).SetEntries(ctx, req.(*SetEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiaryService_DeleteEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiaryServiceServer).DeleteEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiaryService_DeleteEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiaryServiceServer).DeleteEntries(ctx, req.(*DeleteEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiaryService_ClearEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClearEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiaryServiceServer).ClearEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiaryService_ClearEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiaryServiceServer).ClearEntries(ctx, req.(*ClearEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiaryService_ServiceDesc is the grpc.ServiceDesc for ApiaryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiaryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiary.v1.ApiaryService",
	HandlerType: (*ApiaryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetEntries",
			Handler:    _ApiaryService_GetEntries_Handler,
		},
		{
			MethodName: "SetEntries",
			Handler:    _ApiaryService_SetEntries_Handler,
		},
		{
			MethodName: "DeleteEntries",
			Handler:    _ApiaryService_DeleteEntries_Handler,
		},
		{
			MethodName: "ClearEntries",
			Handler:    _ApiaryService_ClearEntries_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apiary/v1/service.proto",
}
